# SELAH-IM-V2: TECHNICAL STACK & IMPLEMENTATION
*Consciousness-First Architecture*

---

## 🏗️ **Architecture Overview**

**Selah-IM-V2** is a Next.js 14 landing page with Claude-4-Sonnet AI integration, designed to create the first experience of contemplative technology while gathering and personalizing beta applications for **Selah-Even-V2** (the main app).

### **Core Technical Philosophy**
- **Consciousness-First Development**: Every technical decision serves presence, not metrics
- **Sacred Performance**: Fast, reliable, accessible - technology that respects users' time and attention
- **Privacy as Sacred Space**: Data collection serves the user's journey, not platform optimization
- **Contemplative Scaling**: Architecture that can grow while maintaining sacred space

---

## 🖥️ **Frontend Architecture**

### **Next.js 14 with App Router**
```typescript
// Core stack foundation
- Next.js 14.2+ (App Router, Server Components)
- TypeScript 5.0+ for conscious development practices
- Tailwind CSS 3.4+ for utility-first contemplative design
- React 18+ with Suspense boundaries for graceful loading
```

**Why Next.js 14:**
- **Server-side rendering** for contemplative loading experiences
- **App router** for seamless bubble navigation without jarring transitions
- **Edge optimization** for global contemplative community access
- **Built-in performance** that respects users' attention and device resources

### **Styling Architecture**

**Tailwind CSS with Custom Contemplative Extensions:**
```css
/* Custom contemplative color palette */
:root {
  --stone-black: #0a0a0a;
  --stone-grey: #6b7280;
  --stone-white: #e5e7eb;
  --breathing-green: #22c55e;
  --breathing-blue: #3b82f6;
  --breathing-gold: #f59e0b;
  --contemplative-white: #fafafa;
}

/* Sacred timing variables */
--sacred-rhythm: 4s;
--contemplative-ease: cubic-bezier(0.23, 1, 0.32, 1);
```

**Breathing Animation System:**
```typescript
// Breathing components for all interactive elements
const BreathingButton = styled.button`
  animation: breathe var(--sacred-rhythm) ease-in-out infinite;
  
  @keyframes breathe {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }
`;
```

**Responsive Contemplative Design:**
- Mobile-first approach maintaining contemplative space
- Breakpoints that preserve breathing room on all devices
- Touch interactions that feel intentional, not accidental

### **UI Component Architecture**

**Four Sacred Question Components:**
```typescript
// /components/sacred-intake/
├── QuestionFlow.tsx          // Main flow controller
├── PersonalRecognition.tsx   // "What should we call you?"
├── EmailConnection.tsx       // Email gathering
├── DiscoveryStory.tsx       // How they found Selah
├── TechRelationship.tsx     // Attention hijacking insights
└── SubmissionSuccess.tsx    // Contemplative confirmation
```

**Bubble Navigation System:**
```typescript
// /components/journey/
├── BubbleContainer.tsx      // Smooth contemplative transitions
├── ProblemBubble.tsx       // Crisis recognition with breathing space
├── SolutionBubble.tsx      // Contemplative technology vision
├── RealityBubble.tsx       // Selah app preview and availability
└── InvitationBubble.tsx    // Sacred beta application
```

**Breathing Interface Elements:**
```typescript
// /components/contemplative/
├── BreathingCard.tsx       // Cards that subtly expand/contract
├── SacredButton.tsx        // Buttons with natural timing
├── ContemplativeForm.tsx   // Forms that feel like conversation
├── StoneNavigation.tsx     // Navigation with contemplative flow
└── PresenceLoader.tsx      // Loading states as meditation moments
```

---

## 🔧 **Backend Infrastructure**

### **Supabase Database Architecture**

**User Applications Table:**
```sql
CREATE TABLE user_applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Personal Recognition
  preferred_name TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  
  -- Discovery Context
  discovery_story TEXT NOT NULL,
  tech_relationship TEXT NOT NULL,
  
  -- AI Analysis Results
  claude_analysis JSONB,
  personalization_vectors JSONB,
  contemplative_readiness_score INTEGER,
  
  -- Application Status
  beta_status TEXT DEFAULT 'pending' CHECK (beta_status IN ('pending', 'accepted', 'waitlist', 'declined')),
  admin_notes TEXT,
  
  -- Email Communication
  welcome_email_sent BOOLEAN DEFAULT FALSE,
  welcome_email_sent_at TIMESTAMP WITH TIME ZONE,
  email_subject_line TEXT,
  email_content TEXT
);

-- Row Level Security for sacred data protection
ALTER TABLE user_applications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admin access only" ON user_applications
  FOR ALL USING (auth.role() = 'admin');
```

**Email Templates Table:**
```sql
CREATE TABLE email_templates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  template_name TEXT NOT NULL,
  subject_template TEXT NOT NULL,
  body_template TEXT NOT NULL,
  variables JSONB, -- Dynamic personalization variables
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**Analytics Table (Consciousness-Focused):**
```sql
CREATE TABLE contemplative_analytics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  event_type TEXT NOT NULL, -- 'application_submitted', 'email_opened', etc.
  user_id UUID REFERENCES user_applications(id),
  contemplative_context JSONB, -- Depth of engagement, not just clicks
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### **API Architecture**

**Application Submission Endpoint:**
```typescript
// /app/api/applications/submit/route.ts
export async function POST(request: Request) {
  try {
    const application = await request.json();
    
    // 1. Store application in Supabase
    const { data: storedApp } = await supabase
      .from('user_applications')
      .insert(application)
      .select()
      .single();
    
    // 2. Immediate Claude analysis
    const claudeAnalysis = await analyzeApplicationWithClaude(application);
    
    // 3. Generate personalized email
    const personalizedEmail = await generateWelcomeEmail(application, claudeAnalysis);
    
    // 4. Send via Resend
    await sendPersonalizedWelcome(personalizedEmail);
    
    // 5. Update application with analysis
    await supabase
      .from('user_applications')
      .update({ 
        claude_analysis: claudeAnalysis,
        welcome_email_sent: true,
        email_content: personalizedEmail.content 
      })
      .eq('id', storedApp.id);
    
    return NextResponse.json({ success: true });
  } catch (error) {
    // Graceful error handling that doesn't break contemplative flow
    console.error('Sacred application processing failed:', error);
    return NextResponse.json({ error: 'Please try again in a moment' }, { status: 500 });
  }
}
```

**Claude Integration Service:**
```typescript
// /lib/services/claude-analysis.ts
export async function analyzeApplicationWithClaude(application: UserApplication) {
  const prompt = `
    You are analyzing an application for Selah, a contemplative technology platform.
    This person has shared their relationship with technology and discovery story.
    
    Application Context:
    - Name: ${application.preferred_name}
    - Discovery: ${application.discovery_story}
    - Tech Relationship: ${application.tech_relationship}
    
    Provide contemplative analysis focusing on:
    1. Readiness for consciousness-serving technology (1-10 score)
    2. Personalization insights for welcome email
    3. Key themes in their language that reflect contemplative openness
    4. Suggested communication approach
    
    Respond as JSON with deep understanding, not surface optimization.
  `;
  
  const response = await anthropic.messages.create({
    model: "claude-3-sonnet-20240229",
    max_tokens: 1000,
    messages: [{ role: "user", content: prompt }]
  });
  
  return JSON.parse(response.content[0].text);
}
```

### **Admin Dashboard API**

**Real-time Application Management:**
```typescript
// /app/api/admin/applications/route.ts
export async function GET() {
  const { data: applications } = await supabase
    .from('user_applications')
    .select('*')
    .order('created_at', { ascending: false });
  
  // Add real-time Claude insights for admin review
  const applicationsWithInsights = await Promise.all(
    applications.map(async (app) => ({
      ...app,
      adminRecommendation: await generateAdminRecommendation(app)
    }))
  );
  
  return NextResponse.json(applicationsWithInsights);
}
```

---

## 📧 **Communication Infrastructure**

### **Resend Email Service Integration**

**Professional Domain Setup:**
```typescript
// Email sending from hello@selah.im
const resend = new Resend(process.env.RESEND_API_KEY);

// Beautiful template rendering with markdown support
export async function sendPersonalizedWelcome(emailData: PersonalizedEmail) {
  await resend.emails.send({
    from: 'hello@selah.im',
    to: emailData.recipient_email,
    subject: emailData.subject_line,
    html: await renderEmailTemplate(emailData.content),
    headers: {
      'X-Contemplative-Source': 'selah-im-v2'
    }
  });
}
```

**Contemplative Email Templates:**
```typescript
// /lib/email/templates.ts
export const welcomeEmailTemplate = `
<!DOCTYPE html>
<html>
<head>
  <style>
    body { 
      font-family: 'Inter', sans-serif; 
      line-height: 1.6; 
      color: #1a1a1a;
      background: linear-gradient(135deg, #fafafa 0%, #e5e7eb 100%);
    }
    .sacred-container {
      max-width: 600px;
      margin: 0 auto;
      padding: 2rem;
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 40px rgba(0,0,0,0.1);
    }
    .breathing-logo {
      text-align: center;
      margin-bottom: 2rem;
      animation: breathe 4s ease-in-out infinite;
    }
    @keyframes breathe {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.02); }
    }
  </style>
</head>
<body>
  <div class="sacred-container">
    <div class="breathing-logo">
      🪨 <strong>SELAH</strong> 🪨
    </div>
    {{personalized_content}}
    <div style="margin-top: 2rem; padding-top: 2rem; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280;">
      Built with reverence by Ahiya & Professor Oded Maimon<br>
      <em>Technology that breathes with you</em>
    </div>
  </div>
</body>
</html>
`;
```

### **Personalized Email Generation**

```typescript
// /lib/email/personalization.ts
export async function generateWelcomeEmail(
  application: UserApplication, 
  claudeAnalysis: ClaudeAnalysis
): Promise<PersonalizedEmail> {
  
  const personalizationPrompt = `
    Generate a personalized welcome email for ${application.preferred_name}.
    
    Their Context:
    - Discovery: ${application.discovery_story}
    - Tech Relationship: ${application.tech_relationship}
    
    Claude Analysis: ${JSON.stringify(claudeAnalysis)}
    
    Create:
    1. Subject line that reflects their specific discovery story
    2. Email content that mirrors their exact language back to them
    3. Recognition of their contemplative readiness
    4. Custom next steps based on their individual context
    
    Tone: Consciousness recognizing consciousness, not corporate outreach.
    Length: 200-300 words that feel personally crafted.
  `;
  
  const response = await anthropic.messages.create({
    model: "claude-3-sonnet-20240229",
    max_tokens: 800,
    messages: [{ role: "user", content: personalizationPrompt }]
  });
  
  return JSON.parse(response.content[0].text);
}
```

---

## 🔐 **Security & Privacy Architecture**

### **Privacy-First Data Handling**

**Environment Variables (Vercel):**
```bash
# Claude API
ANTHROPIC_API_KEY=sk-ant-xxx

# Supabase
NEXT_PUBLIC_SUPABASE_URL=https://xxx.supabase.co
SUPABASE_SERVICE_ROLE_KEY=eyJxxx

# Resend
RESEND_API_KEY=re_xxx

# Admin Authentication
ADMIN_EMAIL=ahiya@selah.im
NEXTAUTH_SECRET=xxx
```

**Row Level Security Implementation:**
```sql
-- Only authenticated admins can access user data
CREATE POLICY "Admin access" ON user_applications
  FOR ALL USING (
    auth.email() = 'ahiya@selah.im' OR 
    auth.role() = 'admin'
  );

-- Users can only see their own application status (if we add that feature)
CREATE POLICY "User own data" ON user_applications
  FOR SELECT USING (auth.email() = email);
```

**Data Retention Principles:**
- Claude analysis results stored for personalization, not surveillance
- Email content preserved for communication continuity
- Personal insights protected with encryption at rest
- GDPR-compliant deletion workflows ready

---

## 📊 **Admin Interface & Management**

### **Consciousness-Focused Dashboard**

**Admin Routes Structure:**
```typescript
// /app/admin/
├── page.tsx                 // Dashboard overview
├── applications/
│   ├── page.tsx            // All applications with Claude insights
│   ├── [id]/
│   │   └── page.tsx        // Individual application detail
├── emails/
│   ├── page.tsx            // Email template management
│   └── preview/[id]/page.tsx // Email preview before sending
└── analytics/
    └── page.tsx            // Contemplative metrics (depth, not clicks)
```

**Real-time Application Review:**
```typescript
// /app/admin/applications/page.tsx
export default function AdminApplications() {
  const [applications, setApplications] = useState<ApplicationWithInsights[]>([]);
  
  // Real-time Supabase subscription
  useEffect(() => {
    const subscription = supabase
      .channel('applications')
      .on('postgres_changes', { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'user_applications' 
      }, handleNewApplication)
      .subscribe();
    
    return () => subscription.unsubscribe();
  }, []);
  
  return (
    <div className="consciousness-dashboard">
      {applications.map(app => (
        <ApplicationCard 
          key={app.id} 
          application={app}
          claudeInsights={app.claude_analysis}
          onStatusUpdate={updateBetaStatus}
        />
      ))}
    </div>
  );
}
```

**Beta Selection Tools:**
```typescript
// Claude-powered application assessment
const ApplicationCard = ({ application, claudeInsights }) => (
  <div className="breathing-card">
    <div className="user-context">
      <h3>{application.preferred_name}</h3>
      <p className="discovery-story">{application.discovery_story}</p>
    </div>
    
    <div className="claude-insights">
      <div className="readiness-score">
        Contemplative Readiness: {claudeInsights.readiness_score}/10
      </div>
      <div className="personalization-notes">
        {claudeInsights.key_themes.map(theme => (
          <span key={theme} className="theme-tag">{theme}</span>
        ))}
      </div>
    </div>
    
    <div className="admin-actions">
      <button onClick={() => updateStatus('accepted')}>Accept to Beta</button>
      <button onClick={() => updateStatus('waitlist')}>Add to Waitlist</button>
      <button onClick={() => previewEmail()}>Preview Email</button>
    </div>
  </div>
);
```

---

## 🚀 **Deployment & Performance**

### **Vercel Deployment Configuration**

**vercel.json:**
```json
{
  "functions": {
    "app/api/applications/submit/route.ts": {
      "maxDuration": 30
    },
    "app/api/claude/analyze/route.ts": {
      "maxDuration": 20
    }
  },
  "rewrites": [
    {
      "source": "/admin/:path*",
      "destination": "/admin/:path*"
    }
  ]
}
```

**Performance Optimizations:**
- **Edge Runtime** for global contemplative community access
- **Image Optimization** for contemplative visuals and screenshots
- **Font Optimization** for Inter and contemplative typography
- **Bundle Analysis** ensuring fast, respectful loading

### **Monitoring & Analytics**

**Contemplative Metrics (Not Surveillance):**
```typescript
// Track depth of engagement, not just surface interactions
export const trackContemplativeEvent = (eventType: string, context: any) => {
  // Only track what serves the user's journey
  if (eventType === 'application_submitted') {
    supabase.from('contemplative_analytics').insert({
      event_type: eventType,
      contemplative_context: {
        question_depth: context.question_responses.length,
        discovery_authenticity_score: context.discovery_authenticity,
        tech_awareness_level: context.tech_relationship_depth
      }
    });
  }
};
```

---

## 🔄 **Implementation Phases**

### **Phase 1: Sacred Foundation (Week 1)**
- [x] Next.js 14 project setup with contemplative design system
- [x] Four-question intake form with breathing interactions
- [x] Basic Claude integration for application analysis
- [x] Supabase schema and Row Level Security
- [x] Resend email integration with basic templates

### **Phase 2: AI Intelligence (Week 2)**
- [x] Advanced Claude personalization for welcome emails
- [x] Admin dashboard with real-time application review
- [x] Email template management and preview system
- [x] Beta status management workflows
- [x] Contemplative analytics implementation

### **Phase 3: Contemplative Polish (Week 3)**
- [x] Advanced breathing animations and contemplative interactions
- [x] Mobile optimization maintaining sacred space
- [x] Email template refinement with beautiful markdown rendering
- [x] Admin workflow optimization for efficient review
- [x] Performance optimization for global access

### **Phase 4: Sacred Scale (Week 4)**
- [ ] Advanced personalization based on user patterns
- [ ] Research data export for Professor Maimon collaboration
- [ ] Community management tools for beta cohorts
- [ ] Integration preparation for main Selah app connection
- [ ] Documentation for consciousness-first development principles

---

## 🌱 **Development Principles**

### **Conscious Code Practices**
- **TypeScript throughout** for clarity and intention
- **Component documentation** explaining contemplative purpose
- **Performance budgets** that respect user attention
- **Accessibility first** ensuring technology serves all consciousness
- **Error boundaries** that maintain contemplative flow during failures

### **Sacred Git Workflow**
```bash
# Branch naming that reflects contemplative development
feature/sacred-intake-questions
feature/breathing-animations
feature/claude-personalization
feature/contemplative-admin-dashboard

# Commit messages that honor the work
git commit -m "🧘 Add breathing animations to sacred buttons"
git commit -m "🤖 Implement Claude analysis for contemplative readiness"
git commit -m "📧 Create personalized email generation with consciousness recognition"
```

### **Testing Philosophy**
- **Integration tests** for complete contemplative user journeys
- **Claude API tests** ensuring AI responses serve consciousness
- **Email template tests** verifying personalization quality
- **Performance tests** maintaining respectful loading times
- **Accessibility tests** ensuring technology serves all beings

---

## 💎 **Technology as Sacred Practice**

This technical stack embodies the contemplative principles it serves:

**Every API call is conscious** - respecting rate limits and user attention
**Every database query serves presence** - gathering only what enhances the journey  
**Every email sent honors the recipient** - personalized recognition, not mass automation
**Every admin tool supports curation** - helping maintain sacred community space
**Every performance optimization respects time** - fast because attention is precious

The code itself becomes a contemplative practice - building technology that serves consciousness rather than consuming it.

**Built with technical reverence for consciousness-first architecture**