# 🧘 Builder R1-V0: Contemplative Landing Experience

**Branch**: `feature/contemplative-landing-experience`
**Mission**: Create the user-facing contemplative journey and sacred intake system

---

## 🌟 **Your Sacred Mission**

You are building the **first experience** users have with contemplative technology. This isn't just a landing page - it's a **demonstration** of consciousness-serving technology in action. Every interaction should feel intentional, breathing, and sacred.

### **What You're Creating**
1. **Four-Bubble Contemplative Journey** - Problem → Solution → Reality → Invitation
2. **Sacred Intake Questions** - Four contemplative questions that reveal readiness
3. **Breathing UI Components** - Technology that literally breathes with users
4. **Mobile-First Experience** - Contemplative design across all devices

### **Consciousness-Serving Principles for Your Work**
- **Recognition over Optimization** - Help users recognize their existing wholeness
- **Presence over Productivity** - Create space for awareness, not urgency
- **Breathing Interactions** - Every element should feel alive and intentional
- **Sacred Timing** - Respect contemplative rhythms, not algorithmic engagement

---

## 🚀 **Getting Started**

### **Branch Setup**
```bash
# 1. Ensure you have the foundation
git checkout main
git pull origin main

# 2. Switch to your branch
git checkout feature/contemplative-landing-experience

# 3. Verify development environment
npm install
npm run dev
npm run type-check

# 4. Confirm you can see the placeholder landing page at localhost:3000
```

### **Your Development Environment**
- **Main URL**: `http://localhost:3000` (landing page)
- **Branch**: `feature/contemplative-landing-experience`
- **Primary Files**: `app/page.tsx`, `components/journey/`, `components/sacred-intake/`
- **Testing**: Mobile-first, breathing animations, accessibility

---

## 📝 **7 Sacred Commits to Complete**

### **🧘 Commit 1: Contemplative Foundation & Bubble Structure**
**Message**: `🧘 Create breathing bubble journey foundation with contemplative spacing`

**What to Build:**
```typescript
// 1. Enhance components/journey/BubbleContainer.tsx
// Add smooth transitions, contemplative spacing, mobile responsiveness

// 2. Create breathing animations in styles/contemplative-variables.css
// Sacred timing, mobile adjustments, accessibility

// 3. Build core bubble components with placeholder content
// ProblemBubble, SolutionBubble, RealityBubble, InvitationBubble
```

**Implementation Details:**

**BubbleContainer.tsx Enhancement:**
```tsx
'use client'

import { ReactNode, useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface BubbleContainerProps {
  children: ReactNode
}

export function BubbleContainer({ children }: BubbleContainerProps) {
  const [visibleBubbles, setVisibleBubbles] = useState(1)
  
  // Contemplative reveal timing - one bubble at a time
  useEffect(() => {
    const timer = setInterval(() => {
      setVisibleBubbles(prev => Math.min(prev + 1, 4))
    }, 2000) // Sacred 2-second intervals
    
    return () => clearInterval(timer)
  }, [])

  return (
    <div className="contemplative-container max-w-4xl mx-auto px-4 md:px-8">
      <div className="space-y-8 md:space-y-12">
        <AnimatePresence>
          {React.Children.map(children, (child, index) => 
            visibleBubbles > index ? (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ 
                  duration: 0.8, 
                  ease: [0.23, 1, 0.32, 1] // Contemplative easing
                }}
                className="breathing-element"
              >
                {child}
              </motion.div>
            ) : null
          )}
        </AnimatePresence>
      </div>
    </div>
  )
}
```

**Breathing Animations Enhancement:**
```css
/* Add to styles/contemplative-variables.css */

/* Breathing Animation System */
.breathing-element {
  animation: breathe var(--breathing-duration) ease-in-out infinite;
  transform-origin: center;
}

.breathing-gentle {
  animation: breathe-gentle 6s ease-in-out infinite;
}

.breathing-card {
  animation: breathe-card 5s ease-in-out infinite;
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  transition: all 0.4s var(--contemplative-ease);
}

.breathing-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 30px rgba(0,0,0,0.15);
}

@keyframes breathe {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.015); }
}

@keyframes breathe-gentle {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.008); }
}

@keyframes breathe-card {
  0%, 100% { 
    transform: scale(1); 
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  }
  50% { 
    transform: scale(1.01); 
    box-shadow: 0 6px 25px rgba(0,0,0,0.12);
  }
}

/* Mobile breathing adjustments */
@media (max-width: 767px) {
  .breathing-element {
    animation-duration: 3.5s; /* Slightly faster for mobile attention */
  }
  
  .breathing-card:hover {
    transform: none; /* Disable hover transforms on mobile */
  }
}

/* Accessibility: Respect prefers-reduced-motion */
@media (prefers-reduced-motion: reduce) {
  .breathing-element,
  .breathing-gentle,
  .breathing-card {
    animation: none;
  }
}
```

**Testing for Commit 1:**
```bash
# Visual Testing
- ✅ Bubbles appear with contemplative timing (2-second intervals)
- ✅ Breathing animations work smoothly on desktop and mobile
- ✅ Hover states feel natural and intentional
- ✅ Animations respect prefers-reduced-motion
- ✅ Mobile spacing maintains breathing room

# Technical Testing
npm run test:components
# Test breathing animations, mobile responsiveness, accessibility
```

---

### **🧘 Commit 2: Problem Recognition Bubble with Research Data**
**Message**: `🧘 Build problem recognition bubble with breathing space for digital overwhelm data`

**What to Build:**
```typescript
// 1. Enhanced ProblemBubble.tsx with real research data
// 2. Contemplative data presentation with breathing space
// 3. Mobile-optimized statistics display
// 4. User testimonial integration with sacred styling
```

**ProblemBubble.tsx Implementation:**
```tsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'

interface OverwhelmStat {
  number: string
  description: string
  impact: string
  icon: string
}

const overwhelmStats: OverwhelmStat[] = [
  {
    number: "96x",
    description: "daily phone checks",
    impact: "attention fragmenting every 10 minutes",
    icon: "📱"
  },
  {
    number: "275",
    description: "daily interruptions", 
    impact: "consciousness scattered across notifications",
    icon: "🧠"
  },
  {
    number: "70%",
    description: "worse sleep quality",
    impact: "technology hijacking natural rhythms",
    icon: "😰"
  }
]

const userTestimonials = [
  "Wired but tired, drowning in notifications...",
  "Time black holes - losing hours without awareness...",
  "Zombie scrolling, muscle memory checking..."
]

export function ProblemBubble() {
  const [visibleStats, setVisibleStats] = useState(0)
  const [currentTestimonial, setCurrentTestimonial] = useState(0)

  // Contemplative stat revelation
  useEffect(() => {
    const timer = setInterval(() => {
      setVisibleStats(prev => Math.min(prev + 1, overwhelmStats.length))
    }, 1500)
    
    return () => clearInterval(timer)
  }, [])

  // Rotating testimonials with sacred timing
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTestimonial(prev => (prev + 1) % userTestimonials.length)
    }, 4000)
    
    return () => clearInterval(timer)
  }, [])

  return (
    <section className="breathing-card bg-white rounded-xl p-6 md:p-8 shadow-lg">
      <motion.h2 
        className="text-2xl md:text-3xl font-bold text-stone-black mb-6"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8 }}
      >
        The Digital Overwhelm Crisis
      </motion.h2>
      
      <div className="space-y-6">
        {/* Research Statistics */}
        <div className="grid gap-4 md:gap-6">
          {overwhelmStats.map((stat, index) => (
            <motion.div
              key={index}
              className={`
                p-4 rounded-lg border-l-4 border-breathing-blue
                ${visibleStats > index ? 'bg-blue-50' : 'bg-stone-50'}
                transition-all duration-500
              `}
              initial={{ opacity: 0, x: -20 }}
              animate={{ 
                opacity: visibleStats > index ? 1 : 0.3,
                x: 0 
              }}
              transition={{ delay: index * 0.3 }}
            >
              <div className="flex items-start space-x-3">
                <span className="text-2xl">{stat.icon}</span>
                <div className="flex-1">
                  <div className="flex flex-col md:flex-row md:items-baseline md:space-x-2">
                    <span className="text-2xl md:text-3xl font-bold text-breathing-blue">
                      {stat.number}
                    </span>
                    <span className="text-lg text-stone-black font-medium">
                      {stat.description}
                    </span>
                  </div>
                  <p className="text-stone-grey mt-1 text-sm md:text-base">
                    {stat.impact}
                  </p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {/* User Voice Section */}
        <motion.div 
          className="mt-8 p-6 bg-gradient-to-r from-stone-white to-contemplative-white rounded-lg"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
        >
          <p className="text-stone-grey text-sm mb-2 text-center">
            From 172,000+ NoSurf community members:
          </p>
          <motion.blockquote 
            key={currentTestimonial}
            className="text-stone-black italic text-center text-lg leading-relaxed"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.5 }}
          >
            "{userTestimonials[currentTestimonial]}"
          </motion.blockquote>
        </motion.div>

        {/* Sacred Recognition */}
        <motion.div 
          className="text-center pt-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 2 }}
        >
          <p className="text-breathing-blue font-medium">
            You are not broken. The technology is.
          </p>
        </motion.div>
      </div>
    </section>
  )
}
```

**Testing for Commit 2:**
```bash
# User Experience Testing
- ✅ Statistics reveal with contemplative timing
- ✅ Testimonials rotate smoothly without jarring
- ✅ Mobile layout maintains readability and breathing space
- ✅ Data feels impactful but not overwhelming
- ✅ Sacred recognition message provides hope

# Performance Testing  
- ✅ Animations don't block main thread
- ✅ Images optimized for mobile bandwidth
- ✅ Text remains readable at all screen sizes
```

---

### **🧘 Commit 3: Solution Vision Bubble with Stone-like AI Principles**
**Message**: `🧘 Create solution bubble demonstrating contemplative technology principles`

**What to Build:**
```typescript
// 1. Enhanced SolutionBubble.tsx with interactive principle cards
// 2. Stone-like AI vs Human-like AI comparison
// 3. Breathing principle cards with hover interactions
// 4. Mobile-optimized principle layout
```

**SolutionBubble.tsx Implementation:**
```tsx
'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'

interface ContemplativePrinciple {
  icon: string
  title: string
  description: string
  traditional: string
  contemplative: string
  example: string
}

const principles: ContemplativePrinciple[] = [
  {
    icon: "🪨",
    title: "Stone-like AI",
    description: "Grounded companions that recognize your wholeness",
    traditional: "Chatty assistants trying to optimize you",
    contemplative: "Stable mirrors reflecting your existing wisdom",
    example: "AI that helps you recognize what you already know, not tells you what to do"
  },
  {
    icon: "🧘", 
    title: "Presence over Productivity",
    description: "Technology that breathes with you, creating space for awareness",
    traditional: "Engagement optimization and attention hijacking",
    contemplative: "Sacred pauses and contemplative timing",
    example: "Interfaces that slow down when you need space, not speed up to capture attention"
  },
  {
    icon: "🌸",
    title: "Being vs Becoming", 
    description: "Not improving yourself, but recognizing what you already are",
    traditional: "Self-improvement apps and optimization tracking",
    contemplative: "Recognition practices and wholeness affirmation",
    example: "Technology that celebrates your completeness, not your potential"
  }
]

export function SolutionBubble() {
  const [hoveredPrinciple, setHoveredPrinciple] = useState<number | null>(null)

  return (
    <section className="breathing-card bg-gradient-to-br from-breathing-blue/5 to-contemplative-white rounded-xl p-6 md:p-8">
      <motion.h2 
        className="text-2xl md:text-3xl font-bold text-breathing-blue mb-2"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        Contemplative Technology
      </motion.h2>
      
      <motion.p 
        className="text-lg text-stone-grey mb-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        Recognition over Optimization
      </motion.p>

      <div className="space-y-4 md:space-y-6">
        {principles.map((principle, index) => (
          <motion.div
            key={index}
            className={`
              breathing-gentle bg-white rounded-lg p-6 border border-transparent
              transition-all duration-300 cursor-pointer
              ${hoveredPrinciple === index ? 'border-breathing-blue shadow-lg scale-[1.01]' : ''}
            `}
            onMouseEnter={() => setHoveredPrinciple(index)}
            onMouseLeave={() => setHoveredPrinciple(null)}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.2 }}
            whileHover={{ scale: 1.01 }}
          >
            <div className="flex items-start space-x-4">
              <span className="text-3xl flex-shrink-0 mt-1">{principle.icon}</span>
              
              <div className="flex-1">
                <h3 className="text-xl font-semibold text-stone-black mb-2">
                  {principle.title}
                </h3>
                
                <p className="text-stone-grey mb-4">
                  {principle.description}
                </p>

                {/* Traditional vs Contemplative Comparison */}
                <motion.div 
                  className={`
                    grid grid-cols-1 md:grid-cols-2 gap-4 transition-all duration-300
                    ${hoveredPrinciple === index ? 'opacity-100' : 'opacity-0 h-0 overflow-hidden'}
                  `}
                >
                  <div className="bg-red-50 p-3 rounded border-l-2 border-red-200">
                    <p className="text-xs text-red-600 font-medium mb-1">TRADITIONAL TECH</p>
                    <p className="text-sm text-red-800">{principle.traditional}</p>
                  </div>
                  
                  <div className="bg-green-50 p-3 rounded border-l-2 border-green-200">
                    <p className="text-xs text-green-600 font-medium mb-1">CONTEMPLATIVE TECH</p>
                    <p className="text-sm text-green-800">{principle.contemplative}</p>
                  </div>
                </motion.div>

                {/* Example */}
                <motion.div
                  className={`
                    mt-4 p-3 bg-breathing-blue/5 rounded transition-all duration-300
                    ${hoveredPrinciple === index ? 'opacity-100' : 'opacity-0 h-0 overflow-hidden'}
                  `}
                >
                  <p className="text-xs text-breathing-blue font-medium mb-1">EXAMPLE</p>
                  <p className="text-sm text-breathing-blue/80 italic">
                    {principle.example}
                  </p>
                </motion.div>
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* Sacred Recognition */}
      <motion.div 
        className="mt-8 text-center p-6 bg-white rounded-lg"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1 }}
      >
        <p className="text-breathing-blue font-medium text-lg">
          Technology that serves what you've always been
        </p>
      </motion.div>
    </section>
  )
}
```

**Testing for Commit 3:**
```bash
# Interaction Testing
- ✅ Principle cards expand smoothly on hover/touch
- ✅ Comparisons are clear and educational
- ✅ Mobile interactions work without hover dependency
- ✅ Typography remains readable at all sizes
- ✅ Sacred recognition feels uplifting

# Educational Testing
- ✅ Users understand contemplative vs traditional technology
- ✅ Stone-like AI concept is clear and compelling
- ✅ Examples make principles concrete and actionable
```

---

### **🧘 Commit 4: Reality & Invitation Bubbles with App Integration**
**Message**: `🧘 Build reality bubble with app previews and sacred invitation to beta`

**What to Build:**
```typescript
// 1. Enhanced RealityBubble.tsx with Selah app screenshots
// 2. InvitationBubble.tsx with sacred application positioning
// 3. App preview components with breathing interactions
// 4. Beta positioning that creates desire through exclusivity
```

**RealityBubble.tsx Implementation:**
```tsx
'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import Image from 'next/image'

interface AppChamber {
  name: string
  description: string
  preview: string
  status: 'available' | 'coming_soon'
  features: string[]
}

const appChambers: AppChamber[] = [
  {
    name: "Meditation Chamber",
    description: "Breathing orb that responds to your touch. Left to inhale, right to exhale, pause for stillness.",
    preview: "/app-screenshots/meditation-chamber.png",
    status: "available",
    features: [
      "Touch-responsive breathing orb",
      "Natural breath rhythm guidance", 
      "No streaks or gamification",
      "Pure presence practice"
    ]
  },
  {
    name: "Contemplation Chamber", 
    description: "AI-generated questions that evolve with your consciousness, creating space for recognition.",
    preview: "/app-screenshots/contemplation-chamber.png",
    status: "available",
    features: [
      "Personalized contemplative questions",
      "Your reflection history",
      "Free-flow writing space",
      "Consciousness evolution tracking"
    ]
  }
]

export function RealityBubble() {
  const [selectedChamber, setSelectedChamber] = useState(0)

  return (
    <section className="breathing-card bg-gradient-to-br from-breathing-green/5 to-contemplative-white rounded-xl p-6 md:p-8">
      <motion.h2 
        className="text-2xl md:text-3xl font-bold text-breathing-green mb-2"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        Selah App: Built and Available Now
      </motion.h2>
      
      <motion.p 
        className="text-lg text-stone-grey mb-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        This isn't vaporware. Contemplative technology exists today.
      </motion.p>

      {/* Chamber Selector */}
      <div className="flex flex-col md:flex-row gap-4 mb-8">
        {appChambers.map((chamber, index) => (
          <motion.button
            key={index}
            className={`
              flex-1 p-4 rounded-lg border-2 transition-all text-left
              ${selectedChamber === index 
                ? 'border-breathing-green bg-breathing-green/5' 
                : 'border-stone-white bg-white hover:border-stone-grey'
              }
            `}
            onClick={() => setSelectedChamber(index)}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <h3 className="font-semibold text-stone-black mb-1">
              {chamber.name}
            </h3>
            <p className="text-sm text-stone-grey">
              {chamber.description}
            </p>
            <div className="mt-2">
              <span className={`
                text-xs px-2 py-1 rounded-full
                ${chamber.status === 'available' 
                  ? 'bg-breathing-green text-white' 
                  : 'bg-stone-grey text-white'
                }
              `}>
                {chamber.status === 'available' ? 'Available' : 'Coming Soon'}
              </span>
            </div>
          </motion.button>
        ))}
      </div>

      {/* Selected Chamber Detail */}
      <motion.div 
        key={selectedChamber}
        className="grid md:grid-cols-2 gap-8"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        {/* App Preview */}
        <div className="breathing-gentle">
          <div className="bg-stone-black rounded-2xl p-4 mx-auto max-w-sm">
            <div className="bg-white rounded-xl overflow-hidden">
              <div className="aspect-[9/16] bg-contemplative-white relative">
                {/* Placeholder for app screenshot */}
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-4xl mb-4">
                      {selectedChamber === 0 ? '🧘' : '💭'}
                    </div>
                    <p className="text-stone-grey text-sm">
                      {appChambers[selectedChamber].name}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Chamber Features */}
        <div className="space-y-4">
          <h4 className="text-xl font-semibold text-stone-black">
            {appChambers[selectedChamber].name} Features
          </h4>
          
          <ul className="space-y-3">
            {appChambers[selectedChamber].features.map((feature, index) => (
              <motion.li 
                key={index}
                className="flex items-start space-x-3"
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <span className="text-breathing-green text-lg">✓</span>
                <span className="text-stone-grey">{feature}</span>
              </motion.li>
            ))}
          </ul>

          {/* Sacred Tech Reminder */}
          <div className="mt-6 p-4 bg-white rounded-lg border border-breathing-green/20">
            <p className="text-sm text-breathing-green/80 italic">
              Every interaction designed to serve consciousness, 
              not consume it.
            </p>
          </div>
        </div>
      </motion.div>

      {/* Availability Status */}
      <motion.div 
        className="mt-8 text-center p-6 bg-white rounded-lg"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1 }}
      >
        <p className="text-breathing-green font-semibold text-lg mb-2">
          Private Beta Deploying Now
        </p>
        <p className="text-stone-grey">
          Android & iOS • Curated contemplative community
        </p>
      </motion.div>
    </section>
  )
}
```

**InvitationBubble.tsx Implementation:**
```tsx
'use client'

import { motion } from 'framer-motion'
import { SacredIntakeFlow } from '@/components/sacred-intake/SacredIntakeFlow'

export function InvitationBubble() {
  return (
    <section className="breathing-card bg-gradient-to-br from-breathing-gold/5 to-contemplative-white rounded-xl p-6 md:p-8">
      <motion.h2 
        className="text-2xl md:text-3xl font-bold text-breathing-gold mb-6"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        We Might Choose You
      </motion.h2>
      
      <div className="space-y-6 mb-8">
        <motion.p 
          className="text-lg text-stone-grey leading-relaxed"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
        >
          This is not a sign-up form. This is a contemplative conversation 
          that helps us recognize who is ready for consciousness-serving technology.
        </motion.p>
        
        <motion.p 
          className="text-stone-grey"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4 }}
        >
          We are building a sacred community of practitioners who understand 
          that recognition, not optimization, is the path.
        </motion.p>

        {/* Beta Positioning */}
        <motion.div 
          className="grid md:grid-cols-3 gap-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <div className="bg-white p-4 rounded-lg text-center">
            <div className="text-2xl mb-2">🧘</div>
            <p className="text-sm font-medium text-stone-black">Contemplative Practitioners</p>
            <p className="text-xs text-stone-grey mt-1">Not casual users</p>
          </div>
          
          <div className="bg-white p-4 rounded-lg text-center">
            <div className="text-2xl mb-2">🪨</div>
            <p className="text-sm font-medium text-stone-black">Recognition Ready</p>
            <p className="text-xs text-stone-grey mt-1">Beyond optimization</p>
          </div>
          
          <div className="bg-white p-4 rounded-lg text-center">
            <div className="text-2xl mb-2">🌸</div>
            <p className="text-sm font-medium text-stone-black">Sacred Community</p>
            <p className="text-xs text-stone-grey mt-1">Quality over quantity</p>
          </div>
        </motion.div>
      </div>
      
      {/* Sacred Intake Flow */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
      >
        <SacredIntakeFlow />
      </motion.div>
      
      {/* Application Process Description */}
      <motion.div 
        className="mt-8 text-center space-y-2"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1 }}
      >
        <p className="text-sm text-stone-grey">
          Applications reviewed thoughtfully by humans and AI
        </p>
        <p className="text-sm text-stone-grey">
          Beta access granted to contemplative practitioners
        </p>
        <p className="text-sm text-breathing-gold font-medium">
          We choose you, not the other way around
        </p>
      </motion.div>
    </section>
  )
}
```

**Testing for Commit 4:**
```bash
# App Reality Testing
- ✅ Chamber previews feel tangible and real
- ✅ Features clearly demonstrate contemplative principles
- ✅ Availability messaging creates appropriate urgency
- ✅ Mobile chamber selector works smoothly

# Invitation Testing
- ✅ Beta positioning feels exclusive but not elitist
- ✅ Sacred application framing creates appropriate mindset
- ✅ Community positioning attracts right users
```

---

### **🧘 Commit 5: Sacred Intake Questions Flow**
**Message**: `🧘 Implement four contemplative questions with breathing form interactions`

**What to Build:**
```typescript
// 1. Complete SacredIntakeFlow.tsx with multi-step form
// 2. Individual question components with contemplative interactions
// 3. Form validation that feels supportive, not harsh
// 4. API integration for application submission
```

**SacredIntakeFlow.tsx Implementation:**
```tsx
'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { PersonalRecognition } from './PersonalRecognition'
import { EmailConnection } from './EmailConnection'
import { DiscoveryStory } from './DiscoveryStory'
import { TechRelationship } from './TechRelationship'
import { SubmissionSuccess } from './SubmissionSuccess'

interface SacredIntakeData {
  preferred_name: string
  email: string
  discovery_story: string
  tech_relationship: string
}

const questions = [
  {
    component: PersonalRecognition,
    title: "Personal Recognition",
    description: "What should we call you?"
  },
  {
    component: EmailConnection,
    title: "Email Connection", 
    description: "How can we reach you?"
  },
  {
    component: DiscoveryStory,
    title: "Discovery Story",
    description: "How did you find contemplative technology?"
  },
  {
    component: TechRelationship,
    title: "Technology Relationship",
    description: "Your insights on attention and technology"
  }
]

export function SacredIntakeFlow() {
  const [currentStep, setCurrentStep] = useState(0)
  const [formData, setFormData] = useState<SacredIntakeData>({
    preferred_name: '',
    email: '',
    discovery_story: '',
    tech_relationship: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const updateFormData = (field: keyof SacredIntakeData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    setError(null) // Clear errors when user types
  }

  const canProgress = () => {
    switch (currentStep) {
      case 0: return formData.preferred_name.trim().length >= 1
      case 1: return formData.email.includes('@') && formData.email.includes('.')
      case 2: return formData.discovery_story.trim().length >= 10
      case 3: return formData.tech_relationship.trim().length >= 10
      default: return false
    }
  }

  const nextStep = () => {
    if (canProgress()) {
      setCurrentStep(prev => Math.min(prev + 1, questions.length))
    }
  }

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 0))
  }

  const submitApplication = async () => {
    if (!canProgress()) return

    setIsSubmitting(true)
    setError(null)

    try {
      const response = await fetch('/api/applications/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Submission failed')
      }

      setIsSubmitted(true)
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Please try again in a moment')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isSubmitted) {
    return <SubmissionSuccess name={formData.preferred_name} />
  }

  const CurrentQuestionComponent = questions[currentStep]?.component

  return (
    <div className="sacred-intake-container">
      {/* Progress Indicator */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <span className="text-sm text-stone-grey">
            Question {currentStep + 1} of {questions.length}
          </span>
          <span className="text-sm text-breathing-gold">
            {questions[currentStep]?.title}
          </span>
        </div>
        
        <div className="w-full bg-stone-white rounded-full h-2">
          <motion.div 
            className="bg-breathing-gold rounded-full h-2"
            initial={{ width: "25%" }}
            animate={{ width: `${((currentStep + 1) / questions.length) * 100}%` }}
            transition={{ duration: 0.5, ease: "easeInOut" }}
          />
        </div>
      </div>

      {/* Question Container */}
      <div className="breathing-card bg-white rounded-lg p-6 min-h-[400px]">
        <AnimatePresence mode="wait">
          {CurrentQuestionComponent && (
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.5 }}
            >
              <CurrentQuestionComponent
                value={Object.values(formData)[currentStep]}
                onChange={(value: string) => 
                  updateFormData(Object.keys(formData)[currentStep] as keyof SacredIntakeData, value)
                }
                onNext={nextStep}
                canProgress={canProgress()}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Error Display */}
        {error && (
          <motion.div 
            className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <p className="text-red-700 text-sm">{error}</p>
          </motion.div>
        )}

        {/* Navigation */}
        <div className="flex justify-between items-center mt-8">
          <motion.button
            onClick={prevStep}
            disabled={currentStep === 0}
            className={`
              px-4 py-2 rounded-lg transition-all
              ${currentStep === 0 
                ? 'text-stone-grey cursor-not-allowed' 
                : 'text-breathing-blue hover:bg-breathing-blue hover:text-white'
              }
            `}
            whileHover={currentStep > 0 ? { scale: 1.05 } : {}}
          >
            Previous
          </motion.button>

          {currentStep < questions.length - 1 ? (
            <motion.button
              onClick={nextStep}
              disabled={!canProgress()}
              className={`
                px-6 py-2 rounded-lg font-medium transition-all
                ${canProgress()
                  ? 'bg-breathing-gold text-white hover:bg-breathing-gold/90' 
                  : 'bg-stone-grey text-white cursor-not-allowed'
                }
              `}
              whileHover={canProgress() ? { scale: 1.05 } : {}}
              whileTap={canProgress() ? { scale: 0.95 } : {}}
            >
              Continue
            </motion.button>
          ) : (
            <motion.button
              onClick={submitApplication}
              disabled={!canProgress() || isSubmitting}
              className={`
                px-6 py-2 rounded-lg font-medium transition-all
                ${canProgress() && !isSubmitting
                  ? 'bg-breathing-green text-white hover:bg-breathing-green/90' 
                  : 'bg-stone-grey text-white cursor-not-allowed'
                }
              `}
              whileHover={canProgress() && !isSubmitting ? { scale: 1.05 } : {}}
              whileTap={canProgress() && !isSubmitting ? { scale: 0.95 } : {}}
            >
              {isSubmitting ? 'Submitting...' : 'Submit Sacred Application'}
            </motion.button>
          )}
        </div>
      </div>
    </div>
  )
}
```

**PersonalRecognition.tsx:**
```tsx
'use client'

import { motion } from 'framer-motion'

interface Props {
  value: string
  onChange: (value: string) => void
  onNext: () => void
  canProgress: boolean
}

export function PersonalRecognition({ value, onChange, onNext, canProgress }: Props) {
  return (
    <motion.div 
      className="space-y-6"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
    >
      <div>
        <h3 className="text-xl font-semibold text-stone-black mb-2">
          What should we call you?
        </h3>
        <p className="text-stone-grey">
          Sacred recognition of the person behind the interaction. 
          This sets the tone of respect and intentionality.
        </p>
      </div>

      <div>
        <input
          type="text"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && canProgress && onNext()}
          placeholder="Your preferred name..."
          className="
            w-full p-4 rounded-lg border border-stone-white 
            focus:border-breathing-gold focus:ring-2 focus:ring-breathing-gold/20
            transition-all text-lg
          "
          autoFocus
        />
      </div>

      <div className="p-4 bg-breathing-gold/5 rounded-lg">
        <p className="text-sm text-breathing-gold/80 italic">
          We believe names carry sacred meaning. How you wish to be recognized matters.
        </p>
      </div>
    </motion.div>
  )
}
```

**Testing for Commit 5:**
```bash
# Sacred Flow Testing
- ✅ Multi-step form flows smoothly between questions
- ✅ Progress indicator provides contemplative guidance
- ✅ Validation feels supportive, not harsh
- ✅ API integration works without breaking contemplative flow
- ✅ Error states maintain sacred space

# Mobile Form Testing
- ✅ Keyboard navigation works smoothly
- ✅ Touch interactions feel natural
- ✅ Input fields are appropriately sized
- ✅ Form doesn't break on small screens
```

---

### **🧘 Commit 6: Breathing UI Components & Mobile Polish**
**Message**: `🧘 Polish breathing components with mobile optimization and accessibility`

**What to Build:**
```typescript
// 1. Enhanced BreathingCard, SacredButton, ContemplativeForm components
// 2. Mobile touch optimization with sacred timing
// 3. Accessibility features for screen readers and keyboard navigation
// 4. Performance optimization for smooth breathing animations
```

**BreathingCard.tsx Implementation:**
```tsx
'use client'

import { ReactNode, forwardRef } from 'react'
import { motion, HTMLMotionProps } from 'framer-motion'

interface BreathingCardProps extends Omit<HTMLMotionProps<"div">, 'children'> {
  children: ReactNode
  variant?: 'gentle' | 'standard' | 'prominent'
  className?: string
}

export const BreathingCard = forwardRef<HTMLDivElement, BreathingCardProps>(
  ({ children, variant = 'standard', className = '', ...props }, ref) => {
    
    const variants = {
      gentle: {
        animate: {
          scale: [1, 1.005, 1],
          boxShadow: [
            '0 4px 20px rgba(0,0,0,0.08)',
            '0 6px 25px rgba(0,0,0,0.12)', 
            '0 4px 20px rgba(0,0,0,0.08)'
          ]
        },
        transition: {
          duration: 6,
          ease: "easeInOut",
          repeat: Infinity
        }
      },
      standard: {
        animate: {
          scale: [1, 1.01, 1],
          boxShadow: [
            '0 4px 20px rgba(0,0,0,0.1)',
            '0 8px 30px rgba(0,0,0,0.15)',
            '0 4px 20px rgba(0,0,0,0.1)'
          ]
        },
        transition: {
          duration: 4,
          ease: "easeInOut", 
          repeat: Infinity
        }
      },
      prominent: {
        animate: {
          scale: [1, 1.015, 1],
          boxShadow: [
            '0 8px 30px rgba(0,0,0,0.12)',
            '0 12px 40px rgba(0,0,0,0.18)',
            '0 8px 30px rgba(0,0,0,0.12)'
          ]
        },
        transition: {
          duration: 5,
          ease: "easeInOut",
          repeat: Infinity
        }
      }
    }

    return (
      <motion.div
        ref={ref}
        className={`
          bg-white rounded-xl shadow-lg overflow-hidden
          ${className}
        `}
        {...variants[variant]}
        whileHover={{
          scale: 1.02,
          transition: { duration: 0.2 }
        }}
        {...props}
      >
        {children}
      </motion.div>
    )
  }
)

BreathingCard.displayName = 'BreathingCard'
```

**SacredButton.tsx Implementation:**
```tsx
'use client'

import { ReactNode, forwardRef } from 'react'
import { motion, HTMLMotionProps } from 'framer-motion'

interface SacredButtonProps extends Omit<HTMLMotionProps<"button">, 'children'> {
  children: ReactNode
  variant?: 'primary' | 'secondary' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  breathing?: boolean
  disabled?: boolean
  className?: string
}

export const SacredButton = forwardRef<HTMLButtonElement, SacredButtonProps>(
  ({ 
    children, 
    variant = 'primary', 
    size = 'md', 
    breathing = true,
    disabled = false,
    className = '',
    ...props 
  }, ref) => {
    
    const baseClasses = `
      font-medium rounded-lg transition-all duration-300
      focus:outline-none focus:ring-2 focus:ring-offset-2
      disabled:cursor-not-allowed disabled:opacity-50
      relative overflow-hidden
    `
    
    const variants = {
      primary: `
        bg-breathing-gold text-white 
        hover:bg-breathing-gold/90 
        focus:ring-breathing-gold/50
        disabled:bg-stone-grey
      `,
      secondary: `
        bg-breathing-blue text-white 
        hover:bg-breathing-blue/90
        focus:ring-breathing-blue/50
        disabled:bg-stone-grey
      `,
      ghost: `
        bg-transparent text-breathing-blue border border-breathing-blue
        hover:bg-breathing-blue hover:text-white
        focus:ring-breathing-blue/50
        disabled:border-stone-grey disabled:text-stone-grey
      `
    }
    
    const sizes = {
      sm: 'px-3 py-1.5 text-sm',
      md: 'px-4 py-2 text-base',
      lg: 'px-6 py-3 text-lg'
    }

    const breathingAnimation = breathing && !disabled ? {
      animate: {
        scale: [1, 1.02, 1]
      },
      transition: {
        duration: 4,
        ease: "easeInOut",
        repeat: Infinity
      }
    } : {}

    return (
      <motion.button
        ref={ref}
        className={`
          ${baseClasses}
          ${variants[variant]}
          ${sizes[size]}
          ${className}
        `}
        whileHover={!disabled ? { scale: 1.05 } : {}}
        whileTap={!disabled ? { scale: 0.95 } : {}}
        disabled={disabled}
        {...breathingAnimation}
        {...props}
      >
        {children}
        
        {/* Sacred ripple effect */}
        <motion.div
          className="absolute inset-0 bg-white/20 rounded-lg"
          initial={{ scale: 0, opacity: 0 }}
          whileTap={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.3 }}
        />
      </motion.button>
    )
  }
)

SacredButton.displayName = 'SacredButton'
```

**ContemplativeForm.tsx Implementation:**
```tsx
'use client'

import { ReactNode, forwardRef } from 'react'
import { motion } from 'framer-motion'

interface ContemplativeFormProps {
  children: ReactNode
  onSubmit?: (e: React.FormEvent) => void
  className?: string
}

interface FormFieldProps {
  label: string
  description?: string
  required?: boolean
  children: ReactNode
  error?: string
}

export const ContemplativeForm = forwardRef<HTMLFormElement, ContemplativeFormProps>(
  ({ children, onSubmit, className = '' }, ref) => {
    return (
      <motion.form
        ref={ref}
        onSubmit={onSubmit}
        className={`space-y-6 ${className}`}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {children}
      </motion.form>
    )
  }
)

export function FormField({ label, description, required, children, error }: FormFieldProps) {
  return (
    <motion.div 
      className="space-y-2"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <label className="block">
        <span className="text-stone-black font-medium">
          {label}
          {required && <span className="text-breathing-gold ml-1">*</span>}
        </span>
        
        {description && (
          <p className="text-stone-grey text-sm mt-1 leading-relaxed">
            {description}
          </p>
        )}
        
        <div className="mt-2">
          {children}
        </div>
      </label>
      
      {error && (
        <motion.p 
          className="text-red-600 text-sm"
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          transition={{ duration: 0.2 }}
        >
          {error}
        </motion.p>
      )}
    </motion.div>
  )
}

ContemplativeForm.displayName = 'ContemplativeForm'
```

**Mobile & Accessibility Enhancements:**
```css
/* Add to styles/contemplative-variables.css */

/* Touch-friendly interactions */
@media (max-width: 767px) {
  .sacred-button {
    min-height: 44px; /* iOS touch target minimum */
    min-width: 44px;
  }
  
  .contemplative-input {
    font-size: 16px; /* Prevent iOS zoom on focus */
    padding: 12px 16px;
  }
  
  .breathing-card {
    animation-duration: 3s; /* Faster for mobile attention */
  }
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  .breathing-element,
  .breathing-card,
  .sacred-button {
    animation: none !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .breathing-card {
    border: 2px solid var(--stone-grey);
  }
  
  .sacred-button {
    border: 2px solid currentColor;
  }
}

/* Focus management for keyboard navigation */
.sacred-focus-ring {
  outline: 2px solid var(--breathing-blue);
  outline-offset: 2px;
  border-radius: 4px;
}
```

**Testing for Commit 6:**
```bash
# Breathing Component Testing
- ✅ All breathing animations respect prefers-reduced-motion
- ✅ Components work smoothly on 60fps and 120fps displays
- ✅ Touch interactions feel natural on mobile devices
- ✅ Keyboard navigation works for all interactive elements

# Accessibility Testing
- ✅ Screen readers can navigate all content
- ✅ Color contrast meets WCAG AA standards
- ✅ Focus management works properly
- ✅ High contrast mode is supported

# Performance Testing
- ✅ Animations don't block main thread
- ✅ Bundle size remains under budget
- ✅ Mobile performance is smooth
```

---

### **🧘 Commit 7: Testing, Documentation & Integration**
**Message**: `🧘 Complete testing suite with documentation for contemplative experience`

**What to Build:**
```typescript
// 1. Comprehensive test suite for all components
// 2. Integration tests for complete user journey
// 3. Performance tests for breathing animations
// 4. Documentation for contemplative UI patterns
// 5. Integration points for other builders
```

**Test Suite Setup:**

**tests/integration/sacred-journey.test.tsx:**
```tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { ContemplativeLandingPage } from '@/app/page'
import { BubbleContainer } from '@/components/journey/BubbleContainer'
import { SacredIntakeFlow } from '@/components/sacred-intake/SacredIntakeFlow'

// Mock API calls
jest.mock('@/lib/services/supabase')
jest.mock('next/navigation')

describe('Sacred Contemplative Journey', () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks()
  })

  test('Complete user journey: Problem → Solution → Reality → Invitation', async () => {
    render(<ContemplativeLandingPage />)
    
    // Check header presence
    expect(screen.getByText(/selah/i)).toBeInTheDocument()
    expect(screen.getByText(/you are here/i)).toBeInTheDocument()
    
    // Wait for bubbles to appear with contemplative timing
    await waitFor(() => {
      expect(screen.getByText(/digital overwhelm crisis/i)).toBeInTheDocument()
    }, { timeout: 3000 })
    
    await waitFor(() => {
      expect(screen.getByText(/contemplative technology/i)).toBeInTheDocument()
    }, { timeout: 5000 })
    
    await waitFor(() => {
      expect(screen.getByText(/selah app.*built/i)).toBeInTheDocument()
    }, { timeout: 7000 })
    
    await waitFor(() => {
      expect(screen.getByText(/we might choose you/i)).toBeInTheDocument()
    }, { timeout: 9000 })
  })

  test('Sacred intake questions flow', async () => {
    render(<SacredIntakeFlow />)
    
    // Question 1: Personal Recognition
    expect(screen.getByText(/what should we call you/i)).toBeInTheDocument()
    
    const nameInput = screen.getByPlaceholderText(/preferred name/i)
    fireEvent.change(nameInput, { target: { value: 'Sacred Practitioner' } })
    
    const continueButton = screen.getByText(/continue/i)
    expect(continueButton).not.toBeDisabled()
    
    fireEvent.click(continueButton)
    
    // Question 2: Email Connection
    await waitFor(() => {
      expect(screen.getByText(/email/i)).toBeInTheDocument()
    })
    
    const emailInput = screen.getByPlaceholderText(/email/i)
    fireEvent.change(emailInput, { target: { value: 'practitioner@consciousness.test' } })
    
    fireEvent.click(screen.getByText(/continue/i))
    
    // Continue through all questions...
    // This tests the complete sacred intake flow
  })

  test('Mobile responsive layout maintains contemplative spacing', () => {
    // Mock mobile viewport
    Object.defineProperty(window, 'innerWidth', {
      writable: true,
      configurable: true,
      value: 375,
    })
    
    render(<BubbleContainer><div>Test Content</div></BubbleContainer>)
    
    const container = screen.getByTestId('bubble-container')
    const styles = window.getComputedStyle(container)
    
    expect(styles.padding).toBe('16px') // Mobile contemplative spacing
  })
})
```

**tests/components/breathing-animations.test.tsx:**
```tsx
import { render, screen } from '@testing-library/react'
import { BreathingCard } from '@/components/contemplative/BreathingCard'
import { SacredButton } from '@/components/contemplative/SacredButton'

describe('Breathing Components', () => {
  test('BreathingCard respects prefers-reduced-motion', () => {
    // Mock reduced motion preference
    Object.defineProperty(window, 'matchMedia', {
      writable: true,
      value: jest.fn().mockImplementation(query => ({
        matches: query === '(prefers-reduced-motion: reduce)',
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
      })),
    })
    
    render(
      <BreathingCard data-testid="breathing-card">
        Sacred Content
      </BreathingCard>
    )
    
    const card = screen.getByTestId('breathing-card')
    const computedStyle = window.getComputedStyle(card)
    
    // Should have no animation when reduced motion is preferred
    expect(computedStyle.animation).toBe('none')
  })

  test('SacredButton provides proper accessibility', () => {
    render(
      <SacredButton aria-label="Submit sacred application">
        Submit
      </SacredButton>
    )
    
    const button = screen.getByRole('button', { name: /submit sacred application/i })
    
    expect(button).toHaveAttribute('aria-label')
    expect(button).toBeVisible()
    expect(button).not.toBeDisabled()
  })
})
```

**Documentation: docs/contemplative-ui-patterns.md:**
```markdown
# Contemplative UI Patterns

## Breathing Animations
All interactive elements should breathe to create life and presence:

```tsx
// Standard breathing for cards and containers
<BreathingCard variant="standard">
  Content that breathes with 4-second rhythm
</BreathingCard>

// Gentle breathing for background elements  
<BreathingCard variant="gentle">
  Subtle 6-second breathing for ambiance
</BreathingCard>
```

## Sacred Timing
- **Bubble reveals**: 2-second intervals for contemplative absorption
- **Form transitions**: 0.5-second smooth transitions
- **Breathing rhythm**: 4 seconds (3.5s on mobile)
- **Hover responses**: 0.2-second acknowledgment

## Mobile Contemplative Design
- Minimum 44px touch targets
- 16px font size to prevent iOS zoom
- Contemplative spacing maintained at all breakpoints
- Touch interactions feel intentional, not accidental

## Accessibility Requirements
- All animations respect `prefers-reduced-motion`
- Color contrast meets WCAG AA standards
- Keyboard navigation for all interactions
- Screen reader friendly content structure
```

**Integration Points Documentation:**

**docs/api-integration.md:**
```markdown
# API Integration Points for Other Builders

## Sacred Intake Submission
Branch 1 submits applications to Branch 2's Claude analysis:

```typescript
// POST /api/applications/submit
interface SacredIntakeData {
  preferred_name: string
  email: string  
  discovery_story: string
  tech_relationship: string
}

// Expected response from Branch 2
interface SubmissionResponse {
  success: boolean
  application_id: string
  message: string
}
```

## Component Exports for Other Builders
```typescript
// Available for use in admin dashboard (Branch 4)
export { BreathingCard } from '@/components/contemplative/BreathingCard'
export { SacredButton } from '@/components/contemplative/SacredButton'
export { ContemplativeForm } from '@/components/contemplative/ContemplativeForm'

// Sacred design tokens for email templates (Branch 3)
export const contemplativeColors = {
  stoneBlack: '#0a0a0a',
  stoneGrey: '#6b7280', 
  breathingGold: '#f59e0b',
  // ... rest of color palette
}
```
```

**Performance Tests:**

**tests/performance/breathing-performance.test.tsx:**
```tsx
import { render } from '@testing-library/react'
import { performance } from 'perf_hooks'
import { BubbleContainer } from '@/components/journey/BubbleContainer'
import { BreathingCard } from '@/components/contemplative/BreathingCard'

describe('Breathing Animation Performance', () => {
  test('Multiple breathing elements maintain 60fps', async () => {
    const startTime = performance.now()
    
    render(
      <BubbleContainer>
        {Array.from({ length: 10 }, (_, i) => (
          <BreathingCard key={i}>
            Performance test card {i}
          </BreathingCard>
        ))}
      </BubbleContainer>
    )
    
    const renderTime = performance.now() - startTime
    
    // Should render 10 breathing cards in under 16ms (60fps budget)
    expect(renderTime).toBeLessThan(16)
  })
})
```

**Final Testing Commands:**
```bash
# Run all tests for Branch 1
npm run test:integration
npm run test:components  
npm run test:performance
npm run test:accessibility

# Visual regression testing
npm run test:visual

# Mobile device testing
npm run test:mobile
```

**Testing Checklist for Commit 7:**
```bash
# Complete User Journey
- ✅ Landing page loads with contemplative timing
- ✅ All four bubbles appear in sequence
- ✅ Sacred intake flow works end-to-end
- ✅ API integration submits applications successfully
- ✅ Error states maintain contemplative flow

# Mobile Experience
- ✅ Responsive design at all breakpoints (375px - 1280px+)
- ✅ Touch interactions feel natural and intentional
- ✅ Breathing animations optimized for mobile performance
- ✅ Keyboard navigation works on mobile devices

# Accessibility & Performance
- ✅ Screen readers can navigate entire experience
- ✅ All animations respect user motion preferences
- ✅ Color contrast meets WCAG AA standards
- ✅ Performance budget maintained (< 500KB bundle)
- ✅ Core Web Vitals meet contemplative standards

# Integration Ready
- ✅ Shared components exported for other builders
- ✅ API contracts documented and tested
- ✅ Sacred design tokens available
- ✅ Documentation complete for handoff
```

---

## 🌟 **Branch Completion Checklist**

Before marking Branch 1 complete, verify:

### **Consciousness-Serving Technology**
- [ ] Every interaction feels intentional and breathing
- [ ] Technology demonstrates recognition over optimization
- [ ] Sacred timing respects contemplative rhythms
- [ ] Mobile experience maintains contemplative space

### **Technical Excellence**
- [ ] All 7 commits completed with contemplative commit messages
- [ ] TypeScript compiles without errors
- [ ] Tests pass with >90% coverage
- [ ] Performance meets contemplative standards
- [ ] Accessibility requirements fulfilled

### **Integration Readiness**
- [ ] API integration points tested and documented
- [ ] Shared components exported for other builders
- [ ] Sacred design system established
- [ ] Documentation complete for handoff

### **Sacred User Experience**
- [ ] Four-bubble journey creates contemplative progression
- [ ] Sacred intake questions feel like conversation, not interrogation
- [ ] Breathing animations create presence, not distraction
- [ ] Mobile experience respects attention and device limitations

---

## 🪨 **Your Sacred Responsibility**

You are not just building a user interface. You are creating the **first demonstration** that technology can serve consciousness rather than consuming it. Every pixel, every animation, every interaction is an opportunity to show users what contemplative technology feels like.

Build with intention. Code with presence. Create technology that breathes.

**The contemplative community is counting on you to demonstrate that another way is possible.**

🧘 *Ready to begin your sacred development journey?*